#!/usr/bin/env python
# coding: utf-8
import sys
from PyQt5.QtWidgets import *
from PyQt5 import QtCore
from PyQt5.QtGui import QFont
from European_Option import *
from American_Option import *
from as_option import *
from Asian_Basket_Option import *





class MainWindow(QMainWindow):

    def __init__(self):
        self.status='European_option'
        super().__init__()

        self.initUI()
        self.show()


    def initUI(self):
        self.menubar = self.menuBar()
        self.menubar.setNativeMenuBar(False)
        EuropeanMenu = self.menubar.addMenu('&European')
        EuropeanOptionAction = QAction('&Option price', self)
        EuropeanOptionAction.triggered.connect(self.EuropeanOptionCalculation)
        volatility = QAction('&Volatility', self)
        volatility.triggered.connect(self.VolatilityCalculation)
        EuropeanMenu.addAction(EuropeanOptionAction)
        EuropeanMenu.addAction(volatility)

        AmericanMenu = self.menubar.addMenu('&American')
        AmericanOptionAction = QAction('&Option price', self)
        AmericanOptionAction.triggered.connect(self.AmericanOptionCalculation)
        AmericanMenu.addAction(AmericanOptionAction)

        AsianMenu = self.menubar.addMenu('&Asian')
        GeometricAction = QAction('&Geometric', self)
        GeometricAction.triggered.connect(self.GeometricOptionCalculation)
        GeometricMonteAction = QAction('&Geometric(Monte Carlo)', self)
        GeometricMonteAction.triggered.connect(self.GeometricMonteOptionCalculation)
        GeometricBasketAction = QAction('&Geometric Basket', self)
        GeometricBasketAction.triggered.connect(self.GeometricBasketOptionCalculation)
        GeometricBasketMonteAction = QAction('&Geometric Basket(Monte Carlo)', self)
        GeometricBasketMonteAction.triggered.connect(self.GeometricBasketMonteOptionCalculation)
        ArithmeticAction = QAction('&Arithmetic', self)
        ArithmeticAction.triggered.connect(self.ArithmeticOptionCalculation)
        ArithmeticBasketAction = QAction('&Arithmetic Basket', self)
        ArithmeticBasketAction.triggered.connect(self.ArithmeticBasketOptionCalculation)
        AsianMenu.addAction(GeometricAction)
        AsianMenu.addAction(GeometricMonteAction)
        AsianMenu.addAction(GeometricBasketAction)
        AsianMenu.addAction(GeometricBasketMonteAction)
        AsianMenu.addAction(ArithmeticAction)
        AsianMenu.addAction(ArithmeticBasketAction)

        self.EuropeanOptionCalculation()

        self.setFixedSize(440, 500)
        self.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint)
        self.setWindowTitle('Financial computing')

    def EuropeanOptionCalculation(self):
        self.status='European_option'
        self.widget=QWidget()
        self.v=QVBoxLayout()

        self.grid=QGridLayout()
        self.Title=QLabel('European Option Pricing')
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setFont(QFont("Roman times", 12, QFont.Bold))
        self.StockLabel = QLabel('stock price:')
        self.StockLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock=QLineEdit()
        self.StrikeLabel = QLabel('strike price:')
        self.StrikeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Strike = QLineEdit()
        self.TLabel=QLabel('T(days):')
        self.TLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.T = QLineEdit()
        self.SigmaLabel=QLabel('sigma:')
        self.SigmaLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma = QLineEdit()
        self.RLabel = QLabel('risk-free rate:')
        self.RLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.R = QLineEdit()
        self.TypeLabel = QLabel('type:')
        self.TypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Type = QComboBox()
        self.Type.addItem('Call')
        self.Type.addItem('Put')
        self.ResultLabel = QLabel('result:')
        self.ResultLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Result = QLabel('')
        self.Result.setAlignment(QtCore.Qt.AlignCenter)

        self.grid.addWidget(self.Title, 0, 0)
        self.grid.addWidget(self.StockLabel, 1, 0)
        self.grid.addWidget(self.Stock, 1, 1)
        self.grid.addWidget(self.StrikeLabel, 2, 0)
        self.grid.addWidget(self.Strike, 2, 1)
        self.grid.addWidget(self.TLabel, 3, 0)
        self.grid.addWidget(self.T, 3, 1)
        self.grid.addWidget(self.SigmaLabel, 4, 0)
        self.grid.addWidget(self.Sigma, 4, 1)
        self.grid.addWidget(self.RLabel, 5, 0)
        self.grid.addWidget(self.R, 5, 1)
        self.grid.addWidget(self.TypeLabel, 6, 0)
        self.grid.addWidget(self.Type, 6, 1)
        self.grid.addWidget(self.ResultLabel, 7, 0)
        self.grid.addWidget(self.Result, 7, 1)

        self.h = QHBoxLayout()
        self.submit = QPushButton('submit')
        self.submit.clicked.connect(self.Submit)
        self.reset = QPushButton('reset')
        self.reset.clicked.connect(self.Reset)
        self.h.addWidget(self.submit)
        self.h.addWidget(self.reset)

        self.v.addLayout(self.grid)
        self.v.addLayout(self.h)

        self.widget.setLayout(self.v)
        self.setCentralWidget(self.widget)

    def VolatilityCalculation(self):
        self.status = 'Implied_Volatility'
        self.widget = QWidget()
        self.v = QVBoxLayout()

        self.grid = QGridLayout()
        self.Title = QLabel('Implied Volatility')
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setFont(QFont("Roman times", 12, QFont.Bold))
        self.StockLabel = QLabel('stock price:')
        self.StockLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock = QLineEdit()
        self.StrikeLabel = QLabel('strike price:')
        self.StrikeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Strike = QLineEdit()
        self.TLabel = QLabel('T(days):')
        self.TLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.T = QLineEdit()
        self.RLabel = QLabel('risk-free rate:')
        self.RLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.R = QLineEdit()
        self.TruePriceLabel = QLabel('true price:')
        self.TruePriceLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.TruePrice = QLineEdit()
        self.TypeLabel = QLabel('type:')
        self.TypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Type = QComboBox()
        self.Type.addItem('Call')
        self.Type.addItem('Put')
        self.ResultLabel = QLabel('result:')
        self.ResultLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Result = QLabel('')
        self.Result.setAlignment(QtCore.Qt.AlignCenter)

        self.grid.addWidget(self.Title, 0, 0)
        self.grid.addWidget(self.StockLabel, 1, 0)
        self.grid.addWidget(self.Stock, 1, 1)
        self.grid.addWidget(self.StrikeLabel, 2, 0)
        self.grid.addWidget(self.Strike, 2, 1)
        self.grid.addWidget(self.TLabel, 3, 0)
        self.grid.addWidget(self.T, 3, 1)
        self.grid.addWidget(self.RLabel, 4, 0)
        self.grid.addWidget(self.R, 4, 1)
        self.grid.addWidget(self.TruePriceLabel, 5, 0)
        self.grid.addWidget(self.TruePrice, 5, 1)
        self.grid.addWidget(self.TypeLabel, 6, 0)
        self.grid.addWidget(self.Type, 6, 1)
        self.grid.addWidget(self.ResultLabel, 7, 0)
        self.grid.addWidget(self.Result, 7, 1)

        self.h = QHBoxLayout()
        self.submit = QPushButton('submit')
        self.submit.clicked.connect(self.Submit)
        self.reset = QPushButton('reset')
        self.reset.clicked.connect(self.Reset)
        self.h.addWidget(self.submit)
        self.h.addWidget(self.reset)

        self.v.addLayout(self.grid)
        self.v.addLayout(self.h)

        self.widget.setLayout(self.v)
        self.setCentralWidget(self.widget)

    def AmericanOptionCalculation(self):
        self.status='American_option'
        self.widget=QWidget()
        self.v=QVBoxLayout()

        self.grid=QGridLayout()
        self.Title=QLabel('American Option Pricing')
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setFont(QFont("Roman times", 12, QFont.Bold))
        self.StockLabel = QLabel('stock price:')
        self.StockLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock=QLineEdit()
        self.StrikeLabel = QLabel('strike price:')
        self.StrikeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Strike = QLineEdit()
        self.TLabel=QLabel('T(days):')
        self.TLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.T = QLineEdit()
        self.SigmaLabel=QLabel('sigma:')
        self.SigmaLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma = QLineEdit()
        self.RLabel = QLabel('risk-free rate:')
        self.RLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.R = QLineEdit()
        self.StepLabel = QLabel('step:')
        self.StepLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Step = QLineEdit()
        self.TypeLabel = QLabel('type:')
        self.TypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Type = QComboBox()
        self.Type.addItem('Call')
        self.Type.addItem('Put')
        self.ResultLabel = QLabel('result:')
        self.ResultLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Result = QLabel('')
        self.Result.setAlignment(QtCore.Qt.AlignCenter)

        self.grid.addWidget(self.Title, 0, 0)
        self.grid.addWidget(self.StockLabel, 1, 0)
        self.grid.addWidget(self.Stock, 1, 1)
        self.grid.addWidget(self.StrikeLabel, 2, 0)
        self.grid.addWidget(self.Strike, 2, 1)
        self.grid.addWidget(self.TLabel, 3, 0)
        self.grid.addWidget(self.T, 3, 1)
        self.grid.addWidget(self.SigmaLabel, 4, 0)
        self.grid.addWidget(self.Sigma, 4, 1)
        self.grid.addWidget(self.RLabel, 5, 0)
        self.grid.addWidget(self.R, 5, 1)
        self.grid.addWidget(self.StepLabel, 6, 0)
        self.grid.addWidget(self.Step, 6, 1)
        self.grid.addWidget(self.TypeLabel, 7, 0)
        self.grid.addWidget(self.Type, 7, 1)
        self.grid.addWidget(self.ResultLabel, 8, 0)
        self.grid.addWidget(self.Result, 8, 1)

        self.h = QHBoxLayout()
        self.submit = QPushButton('submit')
        self.submit.clicked.connect(self.Submit)
        self.reset = QPushButton('reset')
        self.reset.clicked.connect(self.Reset)
        self.h.addWidget(self.submit)
        self.h.addWidget(self.reset)

        self.v.addLayout(self.grid)
        self.v.addLayout(self.h)

        self.widget.setLayout(self.v)
        self.setCentralWidget(self.widget)

    def GeometricOptionCalculation(self):
        self.status='Geometric_option'
        self.widget=QWidget()
        self.v=QVBoxLayout()

        self.grid=QGridLayout()
        self.Title=QLabel('Geometric Option Pricing')
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setFont(QFont("Roman times", 12, QFont.Bold))
        self.StockLabel = QLabel('stock price:')
        self.StockLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock=QLineEdit()
        self.StrikeLabel = QLabel('strike price:')
        self.StrikeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Strike = QLineEdit()
        self.TLabel=QLabel('T(days):')
        self.TLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.T = QLineEdit()
        self.SigmaLabel=QLabel('sigma:')
        self.SigmaLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma = QLineEdit()
        self.RLabel = QLabel('risk-free rate:')
        self.RLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.R = QLineEdit()
        self.NLabel = QLabel('number of times:')
        self.NLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.N = QLineEdit()
        self.TypeLabel = QLabel('type:')
        self.TypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Type = QComboBox()
        self.Type.addItem('Call')
        self.Type.addItem('Put')
        self.ResultLabel = QLabel('result:')
        self.ResultLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Result = QLabel('')
        self.Result.setAlignment(QtCore.Qt.AlignCenter)

        self.grid.addWidget(self.Title, 0, 0)
        self.grid.addWidget(self.StockLabel, 1, 0)
        self.grid.addWidget(self.Stock, 1, 1)
        self.grid.addWidget(self.StrikeLabel, 2, 0)
        self.grid.addWidget(self.Strike, 2, 1)
        self.grid.addWidget(self.TLabel, 3, 0)
        self.grid.addWidget(self.T, 3, 1)
        self.grid.addWidget(self.SigmaLabel, 4, 0)
        self.grid.addWidget(self.Sigma, 4, 1)
        self.grid.addWidget(self.RLabel, 5, 0)
        self.grid.addWidget(self.R, 5, 1)
        self.grid.addWidget(self.NLabel, 6, 0)
        self.grid.addWidget(self.N, 6, 1)
        self.grid.addWidget(self.TypeLabel, 7, 0)
        self.grid.addWidget(self.Type, 7, 1)
        self.grid.addWidget(self.ResultLabel, 8, 0)
        self.grid.addWidget(self.Result, 8, 1)

        self.h = QHBoxLayout()
        self.submit = QPushButton('submit')
        self.submit.clicked.connect(self.Submit)
        self.reset = QPushButton('reset')
        self.reset.clicked.connect(self.Reset)
        self.h.addWidget(self.submit)
        self.h.addWidget(self.reset)

        self.v.addLayout(self.grid)
        self.v.addLayout(self.h)

        self.widget.setLayout(self.v)
        self.setCentralWidget(self.widget)

    def GeometricOptionCalculation(self):
        self.status='Geometric_option'
        self.widget=QWidget()
        self.v=QVBoxLayout()

        self.grid=QGridLayout()
        self.Title=QLabel('Geometric Option Pricing')
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setFont(QFont("Roman times", 12, QFont.Bold))
        self.StockLabel = QLabel('stock price:')
        self.StockLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock=QLineEdit()
        self.StrikeLabel = QLabel('strike price:')
        self.StrikeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Strike = QLineEdit()
        self.TLabel=QLabel('T(days):')
        self.TLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.T = QLineEdit()
        self.SigmaLabel=QLabel('sigma:')
        self.SigmaLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma = QLineEdit()
        self.RLabel = QLabel('risk-free rate:')
        self.RLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.R = QLineEdit()
        self.NLabel = QLabel('number of times:')
        self.NLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.N = QLineEdit()
        self.TypeLabel = QLabel('type:')
        self.TypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Type = QComboBox()
        self.Type.addItem('Call')
        self.Type.addItem('Put')
        self.ResultLabel = QLabel('result:')
        self.ResultLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Result = QLabel('')
        self.Result.setAlignment(QtCore.Qt.AlignCenter)

        self.grid.addWidget(self.Title, 0, 0)
        self.grid.addWidget(self.StockLabel, 1, 0)
        self.grid.addWidget(self.Stock, 1, 1)
        self.grid.addWidget(self.StrikeLabel, 2, 0)
        self.grid.addWidget(self.Strike, 2, 1)
        self.grid.addWidget(self.TLabel, 3, 0)
        self.grid.addWidget(self.T, 3, 1)
        self.grid.addWidget(self.SigmaLabel, 4, 0)
        self.grid.addWidget(self.Sigma, 4, 1)
        self.grid.addWidget(self.RLabel, 5, 0)
        self.grid.addWidget(self.R, 5, 1)
        self.grid.addWidget(self.NLabel, 6, 0)
        self.grid.addWidget(self.N, 6, 1)
        self.grid.addWidget(self.TypeLabel, 7, 0)
        self.grid.addWidget(self.Type, 7, 1)
        self.grid.addWidget(self.ResultLabel, 8, 0)
        self.grid.addWidget(self.Result, 8, 1)

        self.h = QHBoxLayout()
        self.submit = QPushButton('submit')
        self.submit.clicked.connect(self.Submit)
        self.reset = QPushButton('reset')
        self.reset.clicked.connect(self.Reset)
        self.h.addWidget(self.submit)
        self.h.addWidget(self.reset)

        self.v.addLayout(self.grid)
        self.v.addLayout(self.h)

        self.widget.setLayout(self.v)
        self.setCentralWidget(self.widget)

    def GeometricMonteOptionCalculation(self):
        self.status='Geometric_Monte_option'
        self.widget=QWidget()
        self.v=QVBoxLayout()

        self.grid=QGridLayout()
        self.Title=QLabel('Geometric Option Pricing(Monte)')
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setFont(QFont("Roman times", 12, QFont.Bold))
        self.StockLabel = QLabel('stock price:')
        self.StockLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock=QLineEdit()
        self.StrikeLabel = QLabel('strike price:')
        self.StrikeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Strike = QLineEdit()
        self.TLabel=QLabel('T(days):')
        self.TLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.T = QLineEdit()
        self.SigmaLabel=QLabel('sigma:')
        self.SigmaLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma = QLineEdit()
        self.RLabel = QLabel('risk-free rate:')
        self.RLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.R = QLineEdit()
        self.NLabel = QLabel('number of times:')
        self.NLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.N = QLineEdit()
        self.PathLabel = QLabel('number of path:')
        self.PathLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Path = QLineEdit()
        self.TypeLabel = QLabel('type:')
        self.TypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Type = QComboBox()
        self.Type.addItem('Call')
        self.Type.addItem('Put')
        self.ResultLabel = QLabel('result:')
        self.ResultLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Result = QLabel('')
        self.Result.setAlignment(QtCore.Qt.AlignCenter)
        self.ConfidenceLabel = QLabel('confidence interval(95%):')
        self.ConfidenceLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Confidence = QLabel('')
        self.Confidence.setAlignment(QtCore.Qt.AlignCenter)

        self.grid.addWidget(self.Title, 0, 0)
        self.grid.addWidget(self.StockLabel, 1, 0)
        self.grid.addWidget(self.Stock, 1, 1)
        self.grid.addWidget(self.StrikeLabel, 2, 0)
        self.grid.addWidget(self.Strike, 2, 1)
        self.grid.addWidget(self.TLabel, 3, 0)
        self.grid.addWidget(self.T, 3, 1)
        self.grid.addWidget(self.SigmaLabel, 4, 0)
        self.grid.addWidget(self.Sigma, 4, 1)
        self.grid.addWidget(self.RLabel, 5, 0)
        self.grid.addWidget(self.R, 5, 1)
        self.grid.addWidget(self.NLabel, 6, 0)
        self.grid.addWidget(self.N, 6, 1)
        self.grid.addWidget(self.PathLabel, 7, 0)
        self.grid.addWidget(self.Path, 7, 1)
        self.grid.addWidget(self.TypeLabel, 8, 0)
        self.grid.addWidget(self.Type, 8, 1)
        self.grid.addWidget(self.ResultLabel, 9, 0)
        self.grid.addWidget(self.Result, 9, 1)
        self.grid.addWidget(self.ConfidenceLabel, 10, 0)
        self.grid.addWidget(self.Confidence, 10, 1)

        self.h = QHBoxLayout()
        self.submit = QPushButton('submit')
        self.submit.clicked.connect(self.Submit)
        self.reset = QPushButton('reset')
        self.reset.clicked.connect(self.Reset)
        self.h.addWidget(self.submit)
        self.h.addWidget(self.reset)

        self.v.addLayout(self.grid)
        self.v.addLayout(self.h)

        self.widget.setLayout(self.v)
        self.setCentralWidget(self.widget)

    def ArithmeticOptionCalculation(self):
        self.status='Arithmetic_option'
        self.widget=QWidget()
        self.v=QVBoxLayout()

        self.grid=QGridLayout()
        self.Title=QLabel('Arithmetic Option Pricing')
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setFont(QFont("Roman times", 12, QFont.Bold))
        self.StockLabel = QLabel('stock price:')
        self.StockLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock=QLineEdit()
        self.StrikeLabel = QLabel('strike price:')
        self.StrikeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Strike = QLineEdit()
        self.TLabel=QLabel('T(days):')
        self.TLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.T = QLineEdit()
        self.SigmaLabel=QLabel('sigma:')
        self.SigmaLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma = QLineEdit()
        self.RLabel = QLabel('risk-free rate:')
        self.RLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.R = QLineEdit()
        self.NLabel = QLabel('number of times:')
        self.NLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.N = QLineEdit()
        self.PathLabel = QLabel('number of path:')
        self.PathLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Path = QLineEdit()
        self.TypeLabel = QLabel('type:')
        self.TypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Type = QComboBox()
        self.Type.addItem('Call')
        self.Type.addItem('Put')
        self.ControlVarite=QCheckBox('control varite')
        self.ResultLabel = QLabel('result:')
        self.ResultLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Result = QLabel('')
        self.Result.setAlignment(QtCore.Qt.AlignCenter)
        self.ConfidenceLabel = QLabel('confidence interval(95%):')
        self.ConfidenceLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Confidence = QLabel('')
        self.Confidence.setAlignment(QtCore.Qt.AlignCenter)

        self.grid.addWidget(self.Title, 0, 0)
        self.grid.addWidget(self.StockLabel, 1, 0)
        self.grid.addWidget(self.Stock, 1, 1)
        self.grid.addWidget(self.StrikeLabel, 2, 0)
        self.grid.addWidget(self.Strike, 2, 1)
        self.grid.addWidget(self.TLabel, 3, 0)
        self.grid.addWidget(self.T, 3, 1)
        self.grid.addWidget(self.SigmaLabel, 4, 0)
        self.grid.addWidget(self.Sigma, 4, 1)
        self.grid.addWidget(self.RLabel, 5, 0)
        self.grid.addWidget(self.R, 5, 1)
        self.grid.addWidget(self.NLabel, 6, 0)
        self.grid.addWidget(self.N, 6, 1)
        self.grid.addWidget(self.PathLabel, 7, 0)
        self.grid.addWidget(self.Path, 7, 1)
        self.grid.addWidget(self.TypeLabel, 8, 0)
        self.grid.addWidget(self.Type, 8, 1)
        self.grid.addWidget(self.ControlVarite, 9, 1)
        self.grid.addWidget(self.ResultLabel, 10, 0)
        self.grid.addWidget(self.Result, 10, 1)
        self.grid.addWidget(self.ConfidenceLabel, 11, 0)
        self.grid.addWidget(self.Confidence, 11, 1)

        self.h = QHBoxLayout()
        self.submit = QPushButton('submit')
        self.submit.clicked.connect(self.Submit)
        self.reset = QPushButton('reset')
        self.reset.clicked.connect(self.Reset)
        self.h.addWidget(self.submit)
        self.h.addWidget(self.reset)

        self.v.addLayout(self.grid)
        self.v.addLayout(self.h)

        self.widget.setLayout(self.v)
        self.setCentralWidget(self.widget)

    def GeometricBasketOptionCalculation(self):
        self.status='Geometric_Basket_option'
        self.widget=QWidget()
        self.v=QVBoxLayout()

        self.grid=QGridLayout()
        self.Title=QLabel('Geometric Basket Option Pricing')
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setFont(QFont("Roman times", 12, QFont.Bold))
        self.Stock1Label = QLabel('first stock price:')
        self.Stock1Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock1=QLineEdit()
        self.Stock2Label = QLabel('second stock price:')
        self.Stock2Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock2 = QLineEdit()
        self.StrikeLabel = QLabel('strike price:')
        self.StrikeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Strike = QLineEdit()
        self.TLabel=QLabel('T(days):')
        self.TLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.T = QLineEdit()
        self.Sigma1Label=QLabel('first sigma:')
        self.Sigma1Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma1 = QLineEdit()
        self.Sigma2Label = QLabel('second sigma:')
        self.Sigma2Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma2 = QLineEdit()
        self.RLabel = QLabel('risk-free rate:')
        self.RLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.R = QLineEdit()
        self.RhoLabel = QLabel('correlation:')
        self.RhoLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Rho = QLineEdit()
        self.TypeLabel = QLabel('type:')
        self.TypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Type = QComboBox()
        self.Type.addItem('Call')
        self.Type.addItem('Put')
        self.ResultLabel = QLabel('result:')
        self.ResultLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Result = QLabel('')
        self.Result.setAlignment(QtCore.Qt.AlignCenter)

        self.grid.addWidget(self.Title, 0, 0)
        self.grid.addWidget(self.Stock1Label, 1, 0)
        self.grid.addWidget(self.Stock1, 1, 1)
        self.grid.addWidget(self.Stock2Label, 2, 0)
        self.grid.addWidget(self.Stock2, 2, 1)
        self.grid.addWidget(self.StrikeLabel, 3, 0)
        self.grid.addWidget(self.Strike, 3, 1)
        self.grid.addWidget(self.TLabel, 4, 0)
        self.grid.addWidget(self.T, 4, 1)
        self.grid.addWidget(self.Sigma1Label, 5, 0)
        self.grid.addWidget(self.Sigma1, 5, 1)
        self.grid.addWidget(self.Sigma2Label, 6, 0)
        self.grid.addWidget(self.Sigma2, 6, 1)
        self.grid.addWidget(self.RLabel, 7, 0)
        self.grid.addWidget(self.R, 7, 1)
        self.grid.addWidget(self.RhoLabel, 8, 0)
        self.grid.addWidget(self.Rho, 8, 1)
        self.grid.addWidget(self.TypeLabel, 9, 0)
        self.grid.addWidget(self.Type, 9, 1)
        self.grid.addWidget(self.ResultLabel, 10, 0)
        self.grid.addWidget(self.Result, 10, 1)

        self.h = QHBoxLayout()
        self.submit = QPushButton('submit')
        self.submit.clicked.connect(self.Submit)
        self.reset = QPushButton('reset')
        self.reset.clicked.connect(self.Reset)
        self.h.addWidget(self.submit)
        self.h.addWidget(self.reset)

        self.v.addLayout(self.grid)
        self.v.addLayout(self.h)

        self.widget.setLayout(self.v)
        self.setCentralWidget(self.widget)

    def GeometricBasketMonteOptionCalculation(self):
        self.status='Geometric_Basket_Monte_option'
        self.widget=QWidget()
        self.v=QVBoxLayout()

        self.grid=QGridLayout()
        self.Title=QLabel('Geometric Basket Option Pricing(Monte)')
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setFont(QFont("Roman times", 12, QFont.Bold))
        self.Stock1Label = QLabel('first stock price:')
        self.Stock1Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock1=QLineEdit()
        self.Stock2Label = QLabel('second stock price:')
        self.Stock2Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock2 = QLineEdit()
        self.StrikeLabel = QLabel('strike price:')
        self.StrikeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Strike = QLineEdit()
        self.TLabel=QLabel('T(days):')
        self.TLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.T = QLineEdit()
        self.Sigma1Label=QLabel('first sigma:')
        self.Sigma1Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma1 = QLineEdit()
        self.Sigma2Label = QLabel('second sigma:')
        self.Sigma2Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma2 = QLineEdit()
        self.RLabel = QLabel('risk-free rate:')
        self.RLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.R = QLineEdit()
        self.RhoLabel = QLabel('correlation:')
        self.RhoLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Rho = QLineEdit()
        self.PathLabel = QLabel('number of path:')
        self.PathLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Path = QLineEdit()
        self.TypeLabel = QLabel('type:')
        self.TypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Type = QComboBox()
        self.Type.addItem('Call')
        self.Type.addItem('Put')
        self.ResultLabel = QLabel('result:')
        self.ResultLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Result = QLabel('')
        self.Result.setAlignment(QtCore.Qt.AlignCenter)
        self.ConfidenceLabel = QLabel('confidence interval(95%):')
        self.ConfidenceLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Confidence = QLabel('')
        self.Confidence.setAlignment(QtCore.Qt.AlignCenter)

        self.grid.addWidget(self.Title, 0, 0)
        self.grid.addWidget(self.Stock1Label, 1, 0)
        self.grid.addWidget(self.Stock1, 1, 1)
        self.grid.addWidget(self.Stock2Label, 2, 0)
        self.grid.addWidget(self.Stock2, 2, 1)
        self.grid.addWidget(self.StrikeLabel, 3, 0)
        self.grid.addWidget(self.Strike, 3, 1)
        self.grid.addWidget(self.TLabel, 4, 0)
        self.grid.addWidget(self.T, 4, 1)
        self.grid.addWidget(self.Sigma1Label, 5, 0)
        self.grid.addWidget(self.Sigma1, 5, 1)
        self.grid.addWidget(self.Sigma2Label, 6, 0)
        self.grid.addWidget(self.Sigma2, 6, 1)
        self.grid.addWidget(self.RLabel, 7, 0)
        self.grid.addWidget(self.R, 7, 1)
        self.grid.addWidget(self.RhoLabel, 8, 0)
        self.grid.addWidget(self.Rho, 8, 1)
        self.grid.addWidget(self.PathLabel, 9, 0)
        self.grid.addWidget(self.Path, 9, 1)
        self.grid.addWidget(self.TypeLabel, 10, 0)
        self.grid.addWidget(self.Type, 10, 1)
        self.grid.addWidget(self.ResultLabel, 11, 0)
        self.grid.addWidget(self.Result, 11, 1)
        self.grid.addWidget(self.ConfidenceLabel, 12, 0)
        self.grid.addWidget(self.Confidence, 12, 1)

        self.h = QHBoxLayout()
        self.submit = QPushButton('submit')
        self.submit.clicked.connect(self.Submit)
        self.reset = QPushButton('reset')
        self.reset.clicked.connect(self.Reset)
        self.h.addWidget(self.submit)
        self.h.addWidget(self.reset)

        self.v.addLayout(self.grid)
        self.v.addLayout(self.h)

        self.widget.setLayout(self.v)
        self.setCentralWidget(self.widget)

    def ArithmeticBasketOptionCalculation(self):
        self.status='Arithmetic_Basket_option'
        self.widget=QWidget()
        self.v=QVBoxLayout()

        self.grid=QGridLayout()
        self.Title=QLabel('Arithmetic Basket Option Pricing')
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setFont(QFont("Roman times", 12, QFont.Bold))
        self.Stock1Label = QLabel('first stock price:')
        self.Stock1Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock1=QLineEdit()
        self.Stock2Label = QLabel('second stock price:')
        self.Stock2Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Stock2 = QLineEdit()
        self.StrikeLabel = QLabel('strike price:')
        self.StrikeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Strike = QLineEdit()
        self.TLabel=QLabel('T(days):')
        self.TLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.T = QLineEdit()
        self.Sigma1Label=QLabel('first sigma:')
        self.Sigma1Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma1 = QLineEdit()
        self.Sigma2Label = QLabel('second sigma:')
        self.Sigma2Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Sigma2 = QLineEdit()
        self.RLabel = QLabel('risk-free rate:')
        self.RLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.R = QLineEdit()
        self.RhoLabel = QLabel('correlation:')
        self.RhoLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Rho = QLineEdit()
        self.PathLabel = QLabel('number of path:')
        self.PathLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Path = QLineEdit()
        self.TypeLabel = QLabel('type:')
        self.TypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Type = QComboBox()
        self.Type.addItem('Call')
        self.Type.addItem('Put')
        self.ControlVarite = QCheckBox('control varite')
        self.ResultLabel = QLabel('result:')
        self.ResultLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Result = QLabel('')
        self.Result.setAlignment(QtCore.Qt.AlignCenter)
        self.ConfidenceLabel = QLabel('confidence interval(95%):')
        self.ConfidenceLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Confidence = QLabel('')
        self.Confidence.setAlignment(QtCore.Qt.AlignCenter)

        self.grid.addWidget(self.Title, 0, 0)
        self.grid.addWidget(self.Stock1Label, 1, 0)
        self.grid.addWidget(self.Stock1, 1, 1)
        self.grid.addWidget(self.Stock2Label, 2, 0)
        self.grid.addWidget(self.Stock2, 2, 1)
        self.grid.addWidget(self.StrikeLabel, 3, 0)
        self.grid.addWidget(self.Strike, 3, 1)
        self.grid.addWidget(self.TLabel, 4, 0)
        self.grid.addWidget(self.T, 4, 1)
        self.grid.addWidget(self.Sigma1Label, 5, 0)
        self.grid.addWidget(self.Sigma1, 5, 1)
        self.grid.addWidget(self.Sigma2Label, 6, 0)
        self.grid.addWidget(self.Sigma2, 6, 1)
        self.grid.addWidget(self.RLabel, 7, 0)
        self.grid.addWidget(self.R, 7, 1)
        self.grid.addWidget(self.RhoLabel, 8, 0)
        self.grid.addWidget(self.Rho, 8, 1)
        self.grid.addWidget(self.PathLabel, 9, 0)
        self.grid.addWidget(self.Path, 9, 1)
        self.grid.addWidget(self.TypeLabel, 10, 0)
        self.grid.addWidget(self.Type, 10, 1)
        self.grid.addWidget(self.ControlVarite, 11, 1)
        self.grid.addWidget(self.ResultLabel, 12, 0)
        self.grid.addWidget(self.Result, 12, 1)
        self.grid.addWidget(self.ConfidenceLabel, 13, 0)
        self.grid.addWidget(self.Confidence, 13, 1)

        self.h = QHBoxLayout()
        self.submit = QPushButton('submit')
        self.submit.clicked.connect(self.Submit)
        self.reset = QPushButton('reset')
        self.reset.clicked.connect(self.Reset)
        self.h.addWidget(self.submit)
        self.h.addWidget(self.reset)

        self.v.addLayout(self.grid)
        self.v.addLayout(self.h)

        self.widget.setLayout(self.v)
        self.setCentralWidget(self.widget)

    def Submit(self):
        if(self.status=='European_option'):
            try:
                stock=float(self.Stock.text())
                strike=float(self.Strike.text())
                T=float(self.T.text())/365
                sigma=float(self.Sigma.text())
                r=float(self.R.text())
                type=self.Type.currentText()
                self.Result.setText(str(European_option(stock,strike,T,sigma,r,type)))
            except:
                pass
        elif(self.status=='Implied_Volatility'):
            try:
                stock = float(self.Stock.text())
                strike = float(self.Strike.text())
                T = float(self.T.text()) / 365
                r = float(self.R.text())
                true_price=float(self.TruePrice.text())
                type = self.Type.currentText()
                self.Result.setText(str(Implied_volatility(stock,strike,T,r,true_price,type)))
            except:
                pass
        elif(self.status=='American_option'):

            stock = float(self.Stock.text())
            strike = float(self.Strike.text())
            T = float(self.T.text()) / 365
            sigma = float(self.Sigma.text())
            r = float(self.R.text())
            step=int(self.Step.text())
            type = self.Type.currentText()
            self.Result.setText(str(American_option( strike , stock , T , r , sigma, step, type )))

        elif(self.status=='Geometric_option'):
            try:
                stock = float(self.Stock.text())
                strike = float(self.Strike.text())
                T = float(self.T.text()) / 365
                sigma = float(self.Sigma.text())
                r = float(self.R.text())
                n=int(self.N.text())
                type = self.Type.currentText()
                self.Result.setText(str(Geometric_Asian_Option(stock, sigma, r, T, strike, n, type)))
            except:
                pass
        elif (self.status == 'Geometric_Monte_option'):
            try:
                stock = float(self.Stock.text())
                strike = float(self.Strike.text())
                T = float(self.T.text()) / 365
                sigma = float(self.Sigma.text())
                r = float(self.R.text())
                n = int(self.N.text())
                path=int(self.Path.text())
                type = self.Type.currentText()
                _,_,Geo_mean, confmc_geo=Arithmetic_Asian_Option(stock, sigma, r, T, strike, n, type, path)
                self.Result.setText(str(Geo_mean))
                confmc_geo=str(round(confmc_geo[0],5))+'-'+str(round(confmc_geo[1],5))
                self.Confidence.setText(str(confmc_geo))
            except:
                pass
        elif (self.status == 'Arithmetic_option'):
            try:
                stock = float(self.Stock.text())
                strike = float(self.Strike.text())
                T = float(self.T.text()) / 365
                sigma = float(self.Sigma.text())
                r = float(self.R.text())
                n = int(self.N.text())
                path=int(self.Path.text())
                type = self.Type.currentText()
                if self.ControlVarite.isChecked():
                    Pmean, confmc,_,_=Arithmetic_Asian_Option(stock, sigma, r, T, strike, n, type, path,'control variate')
                    print(0)
                else:
                    Pmean, confmc,_,_ = Arithmetic_Asian_Option(stock, sigma, r, T, strike, n, type, path)
                    print(1)
                self.Result.setText(str(Pmean))
                confmc=str(round(confmc[0],5))+'-'+str(round(confmc[1],5))
                self.Confidence.setText(str(confmc))
            except:
                pass
        elif (self.status == 'Geometric_Basket_option'):

            stock1 = float(self.Stock1.text())
            stock2 = float(self.Stock2.text())
            strike = float(self.Strike.text())
            T = float(self.T.text()) / 365
            sigma1 = float(self.Sigma1.text())
            sigma2 = float(self.Sigma2.text())
            r = float(self.R.text())
            rho=float(self.Rho.text())
            type = self.Type.currentText()
            self.Result.setText(str(Geo_Basket_option(stock1, stock2, sigma1, sigma2, r, T, strike, rho, type)))
        elif (self.status == 'Geometric_Basket_Monte_option'):
            try:
                stock1 = float(self.Stock1.text())
                stock2 = float(self.Stock2.text())
                strike = float(self.Strike.text())
                T = float(self.T.text()) / 365
                sigma1 = float(self.Sigma1.text())
                sigma2 = float(self.Sigma2.text())
                r = float(self.R.text())
                rho = float(self.Rho.text())
                path=int(self.Path.text())
                type = self.Type.currentText()
                _,_,Geo_mean, confmc_geo=Ari_Basket_option(stock1, stock2, sigma1, sigma2, r, T, strike, rho, type, path)
                self.Result.setText(str(Geo_mean))
                confmc_geo=str(round(confmc_geo[0],5))+'-'+str(round(confmc_geo[1],5))
                self.Confidence.setText(str(confmc_geo))
            except:
                pass
        elif (self.status == 'Arithmetic_Basket_option'):

            stock1 = float(self.Stock1.text())
            stock2 = float(self.Stock2.text())
            strike = float(self.Strike.text())
            T = float(self.T.text()) / 365
            sigma1 = float(self.Sigma1.text())
            sigma2 = float(self.Sigma2.text())
            r = float(self.R.text())
            rho = float(self.Rho.text())
            path=int(self.Path.text())
            type = self.Type.currentText()
            if self.ControlVarite.isChecked():
                Pmean, confmc,_,_=Ari_Basket_option(stock1, stock2, sigma1, sigma2, r, T, strike, rho, type, path,'control variate')
            else:
                Pmean, confmc,_,_ = Ari_Basket_option(stock1, stock2, sigma1, sigma2, r, T, strike, rho, type, path,'control variate')
            self.Result.setText(str(Pmean))
            confmc=str(round(confmc[0],5))+'-'+str(round(confmc[1],5))
            self.Confidence.setText(str(confmc))




    def Reset(self):
        if(self.status=='European_option'):
            self.EuropeanOptionCalculation()
        elif (self.status == 'Implied_Volatility'):
            self.VolatilityCalculation()
        elif (self.status == 'American_option'):
            self.AmericanOptionCalculation()
        elif (self.status == 'Geometric_option'):
            self.GeometricOptionCalculation()
        elif (self.status == 'Geometric_Monte_option'):
            self.GeometricMonteOptionCalculation()
        elif (self.status == 'Arithmetic_option'):
            self.ArithmeticOptionCalculation()
        elif (self.status == 'Geometric_Basket_option'):
            self.GeometricBasketOptionCalculation()
        elif(self.status == 'Geometric_Basket_Monte_option'):
            self.GeometricBasketMonteOptionCalculation()
        elif (self.status == 'Arithmetic_Basket_option'):
            self.ArithmeticBasketOptionCalculation()



if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MainWindow()
    sys.exit(app.exec_())

